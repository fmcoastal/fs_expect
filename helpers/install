s file takes the files from the git clone process and writes the necessary files 
#   to the $BASE_DIR/sdk-base/package location.

#this is a little bit of a circular reference
#   If you have the files from github, they are not compressed
#
#   You may have a tar file of the package.  if this is the case,
#    this script will decompress the tarball, write the files to 
#    the proper location, and modify the upper level .Config to 
#    have twsi_tool Built in.

PACKAGE_NAME="fs_expect"
PACKAGE_NAME_REV="$PACKAGE_NAME"-1.0.0

#BASE_DIR=/home/fsmith/marvell/sdk/SDK190603
BASE_DIR=/home/fsmith/marvell/sdk/SDK-10.3.2.1

# location of where the package from Github was placed  (my Steps...)
#   mkdir -p /scratch
#   cd /scratch
#   git clone https://github.com/fmcoastal/buildroot_twsi_tool.git twsi_tool
SRC_DIR=/scratch/fs_expect


RED=$'\e[31m'
GREEN=$'\e[32m'
YELLOW=$'\e[33m'
CYAN=$'\e[36m'
NORMAL=$'\e[0m'
INVERT=$'\e[7m'

#BUILDROOT_EXTERNAL_DIR
#BR_EXT_DIR=$BASE_DIR/buildroot-external-marvell
BR_EXT_DIR=$BASE_DIR/sdk-base

banner() {
echo ""
echo "$GREEN********"
echo "* $1"
echo "********$NORMAL"
}


# check if "$BASE_DIR/$BR_EXT_DIR/package/<PACKAGENAME> exists.
#   if it does, we will leave it alone. 
banner "see if $BR_EXT_DIR/package/$PACKAGE_NAME exists"
if [ ! -d $BR_EXT_DIR/package/$PACKAGE_NAME ] ; then
    banner  "$PACKAGE_NAME does not exist, Will create"
    echo "mkdir -p $BR_EXT_DIR/package/$PACKAGE_NAME "
    mkdir -p $BR_EXT_DIR/package/$PACKAGE_NAME 
else
    echo "package <>/$BR_SET_DIR/package/$PACKAGE_NAME exists"

#   #if the directory exists, delete it
#      rm -rf $BASE_DIR/$BR_EST_DIR/package/$PACKAGE_NAME

fi



# assumption...
#    generically:  
#        you are in the "helpers" directory of the code you pulled from Github
#    Specifically: 
#        you have placed the twsi_tool code from github at /scratch/twsi_tool 
#        you are in the /scratch/twsi_tool/helpers directory.
#    
# and 
#    the location of the package files needed are 
#    ../package/<PACKAGE_NAME>/Config.in
#    ../package/<PACKAGE_NAME>/<PACKAGE_NAME>.mk
SRC_DIR=../package


# copy the files 
  banner "Move Config.in and <PACKAGE_NAME>.mk to the <sdk>/sdk-base/package" 
  echo " cp ../package/Config.in $BR_EXT_DIR/package/$PACKAGE_NAME/."
  cp ../package/Config.in $BR_EXT_DIR/package/$PACKAGE_NAME/.
  echo " cp ../package/$PACKAGE_NAME.mk  $BR_EXT_DRI/package/$PACKAGE_NAME/."
  cp ../package/$PACKAGE_NAME.mk  $BR_EXT_DIR/package/$PACKAGE_NAME/.



banner " add our Package to the \"$BR_EXT_DIR/Compile.in\" list"

# this is not a very exact match.   it will error with packages of similar names
#          eg:   <ProjectName> would not be installed if there were a package  <ProjectName>_test 

TEXT=$(cat $BR_EXT_DIR/Config.in | grep $PACKAGE_NAME)
if [ "$TEXT" == "" ] ; then
   if [ ! -f $BR_EXT_DIR/Config.in_Original ] ; then
      cp $BR_EXT_DIR/Config.in $BR_EXT_DIR/Config.in_Original
   fi
   echo "echo source \"\$BR2_EXTERNAL_MARVELL_SDK_PATH/package/$PACKAGE_NAME/Config.in\" >> $BR_EXT_DIR/Config.in"
   echo "" >> $BR_EXT_DIR/Config.in
   echo "source \"\$BR2_EXTERNAL_MARVELL_SDK_PATH/package/$PACKAGE_NAME/Config.in\"" >> $BR_EXT_DIR/Config.in
else
   echo "$RED found the following entry in the Config.in Directory $NORMAL " 
   echo "$TEXT"
fi

banner "contents of Config.in"
cat  $BR_EXT_DIR/Config.in

banner "contents of:  $BR_EXT_DIR/package/$PACKAGE_NAME/"
pushd $BR_EXT_DIR/package/$PACKAGE_NAME >>/dev/zero
echo "ls -la   * "
ls -la  *
#cat  Config.in
#cat  $PACKAGE_NAME.mk
popd  >>/dev/zero



banner "now runing \"force_rebuild\" from the directory above"
pushd ../
./force_rebuild
popd


echo "$GREEN!Fin$NORMAL"
